"""The Mimeo JSON Generator module.

It exports only one class:
    * JSONGenerator
        A Generator implementation producing data in the JSON format.
"""
from __future__ import annotations

import json
import logging
import xml.etree.ElementTree as ElemTree
from typing import Iterator

from mimeo.config import constants as cc
from mimeo.config.mimeo_config import MimeoConfig, MimeoTemplate
from mimeo.context import MimeoContext
from mimeo.context.decorators import (mimeo_context)
from mimeo.generators import Generator
from mimeo.utils import MimeoRenderer

logger = logging.getLogger(__name__)


class JSONGenerator(Generator):
    """A Generator implementation producing data in the JSON format.

    This Generator is instantiated for the 'json' output format
    and produces data using Mimeo Configuration.

    Methods
    -------
    generate(
        templates: list | Iterator[MimeoTemplate],
        parent: dict = None
    ) -> Iterator[dict]
        Generate JSON data based on the Mimeo Configuration.
    stringify(
        data: json
    ) -> str
        Stringify data generated by the generate() method.
    """

    def __init__(
            self,
            mimeo_config: MimeoConfig,
    ):
        """Initialize JSONGenerator class.

        Parameters
        ----------
        mimeo_config : MimeoConfig
            A Mimeo Configuration
        """
        self.__indent = mimeo_config.output.indent

    @classmethod
    def generate(
            cls,
            templates: list | Iterator[MimeoTemplate],
            parent: dict = None,
    ) -> Iterator[dict]:
        """Generate JSON data based on the Mimeo Configuration.

        This function is used recursively when a Mimeo Configuration
        contains nested templates.
        It iterates through all templates configured and yields data
        units.

        Parameters
        ----------
        templates : list | Iterator[MimeoTemplate]
            A collection of Mimeo Templates to process
        parent : dict, default None
            A parent JSON node for the currently processed template.
            It is passed only when a Mimeo Config contain nested
            templates.

        Returns
        -------
        Iterator[ElemTree.Element]
            Iterator for generated nodes
        """
        for template in templates:
            for data_unit in cls._process_single_template(template, parent):
                yield data_unit

    def stringify(
            self,
            data_unit: dict,
    ) -> str:
        """Stringify JSON data generated by the generate() method.

        Parameters
        ----------
        data_unit: dict
            A single data unit generated by the generate() method

        Returns
        -------
        str
            Stringified data unit
        """
        if self.__indent is not None and self.__indent != 0:
            return json.dumps(data_unit, indent=self.__indent)

        return json.dumps(data_unit)

    @classmethod
    @mimeo_context
    def _process_node(
            cls,
            parent: ElemTree.Element | None,
            entry_meta: dict,
            context: MimeoContext = None,
    ) -> ElemTree.Element:
        """Process a single template's node.

        This is a recursive function that traverses Mimeo Template and generates JSON
        nodes based on element's metadata. First, element is pre-processed, in meaning
        of metadata being adjusted. Then, element is processed accordingly to its value
        type.

        Parameters
        ----------
        parent : ElemTree.Element | None
            A parent node
        entry_meta : dict
            Element's metadata
        context : MimeoContext, default None
            The current Mimeo Context (injected by MimeoContextManager)

        Returns
        -------
        ElemTree.Element
            A single data unit generated within a single template iteration.

        Raises
        ------
        UnsupportedStructureError
            If a list value elements are not atomic-only or dict-only.
        InvalidSpecialFieldValueError
            If a special field value is dict or list
        SpecialFieldNotFoundError
            If a special field does not exist.
        """
        parent = parent if parent is not None else {}
        return super()._process_node(parent, entry_meta, context)

    @classmethod
    def _pre_process_node(
            cls,
            entry_meta: dict,
    ) -> dict:
        """Pre-process element's metadata.

        This function adjusts existing element's metadata and completes it with custom
        properties:
        * the tag property is changed only for special fields
          - field name is extracted
        * the value property is being modified for dicts including attributes
          - properties starting with '@' are being removed from the dict
        * the attrs property
          - is being populated by all properties starting with '@'
          - takes the default value (an empty dict) when there's no such properties
        * the mimeo_util property is being initialized
          - True if element's value is a parametrized mimeo_util. Otherwise, False.
        * the special property is being initialized
          - True, when a field is special. Otherwise, False.

        Parameters
        ----------
        entry_meta : dict
            Initial element's metadata

        Returns
        -------
        dict
            Complete element's metadata
        """
        tag = entry_meta["name"]
        value = entry_meta["value"]
        is_mimeo_util = MimeoRenderer.is_parametrized_mimeo_util(value)
        is_special_field = MimeoRenderer.is_special_field(tag)
        if is_special_field:
            tag = MimeoRenderer.get_special_field_name(tag)

        return cls._entry_meta(
            tag,
            value,
            None,
            is_mimeo_util,
            is_special_field)

    @classmethod
    def _process_complex_value(
            cls,
            parent: ElemTree.Element | None,
            entry_meta: dict,
    ) -> ElemTree.Element | None:
        """Process a node with a complex value.

        The node is processed accordingly to its value type.
        When the type is list and tag is _templates_, node is processed
        in a special way.

        Parameters
        ----------
        parent : ElemTree.Element | None
            A parent node
        entry_meta : dict
            Element's metadata

        Returns
        -------
        ElemTree.Element
            A processed node

        Raises
        ------
        UnsupportedStructureError
            If a list value elements are not atomic-only or dict-only.
        InvalidSpecialFieldValueError
            If a special field value is dict or list
        SpecialFieldNotFoundError
            If a special field does not exist.
        """
        if (isinstance(entry_meta["value"], dict) and
                cc.TEMPLATES_KEY not in entry_meta["value"]):
            func = cls._process_dict_value
        elif (isinstance(entry_meta["value"], list) and
              entry_meta["name"] != cc.TEMPLATES_KEY):
            func = cls._process_list_value
        else:
            func = cls._process_templates_value
        return func(parent, entry_meta)

    @classmethod
    def _process_dict_value(
            cls,
            parent: ElemTree.Element | None,
            entry_meta: dict,
    ) -> ElemTree.Element:
        """Process a node with a dictionary value.

        It iterates through the dictionary items and processes each of them.

        Parameters
        ----------
        parent : ElemTree.Element | None
            A parent node
        entry_meta : dict
            Element's metadata

        Returns
        -------
        ElemTree.Element
            A processed node

        Raises
        ------
        UnsupportedStructureError
            If a list value elements are not atomic-only or dict-only.
        InvalidSpecialFieldValueError
            If a special field value is dict or list
        SpecialFieldNotFoundError
            If a special field does not exist.

        Examples
        --------
        parent = ElemTree.Element("Root")
        entry_meta = cls._entry_meta(
            tag="SomeField",
            value={"SomeChild1": 1, "SomeChild2": 2},
        )
        cls._process_dict_value(parent, entry_meta)
        ->
        <SomeField>
            <SomeChild1>1</SomeChild1>
            <SomeChild2>2</SomeChild2>
        </SomeField>
        """
        element = cls._create_node(parent, entry_meta)
        for child_tag, child_value in entry_meta["value"].items():
            cls._process_node(element, cls._entry_meta(child_tag, child_value))
        return parent

    @classmethod
    def _process_list_value(
            cls,
            parent: ElemTree.Element,
            entry_meta: dict,
    ) -> ElemTree.Element:
        """Process a node with a list value.

        It iterates through the list items and processes each of them: generates
        a child element for each value as direct children of the parent.

        Parameters
        ----------
        parent : ElemTree.Element | None
            A parent node
        entry_meta : dict
            Element's metadata

        Returns
        -------
        ElemTree.Element
            A processed node

        Raises
        ------
        UnsupportedStructureError
            If any of the list value element is a list.
        InvalidSpecialFieldValueError
            If the special field value is dict or list
        SpecialFieldNotFoundError
            If the special field does not exist.

        Examples
        --------
        parent = ElemTree.Element("Root")
        entry_meta = cls._entry_meta(
            tag="SomeField",
            value=[
                'value-1',
                {'SomeChild1': True, 'SomeChild2': False},
                {'_mimeo_util': {'_name': 'auto_increment', 'pattern': '{}'}}
            ],
        )
        cls._process_list_value_with_atomic_children(parent, entry_meta)
        ->
        <Root>
            <SomeField>value-1</SomeField>
            <SomeField>
                <SomeChild1>true</SomeChild1>
                <SomeChild2>false</SomeChild2>
            </SomeField>
            <SomeField>1</SomeField>
        </Root>
        """
        element = cls._create_node(parent, entry_meta)
        for child in entry_meta["value"]:
            entry_meta = cls._entry_meta(entry_meta["name"], child)
            cls._process_node(element, entry_meta)
        return parent

    @classmethod
    def _process_templates_value(
            cls,
            parent: ElemTree.Element,
            entry_meta: dict,
    ) -> ElemTree.Element:
        """Process a node with a dictionary value storing templates.

        It iterates through the templates and generates data based on them.

        Parameters
        ----------
        parent : ElemTree.Element | None
            A parent node
        entry_meta : dict
            Element's metadata

        Returns
        -------
        ElemTree.Element
            A processed node

        Raises
        ------
        UnsupportedStructureError
            If a list value elements are not atomic-only or dict-only.
        InvalidSpecialFieldValueError
            If a special field value is dict or list
        SpecialFieldNotFoundError
            If a special field does not exist.

        Examples
        --------
        parent = ElemTree.Element("Root")
        entry_meta = cls._entry_meta(
            tag="SomeField",
            value={"_templates_": [
                {
                  "count": 10,
                  "model": {
                    "SomeChild": {
                      "Node1": 1,
                      "Node2": "value-2",
                      "Node3": true
                    }
                  }
                }
            ]},
        )
        cls._process_templates_value(parent, entry_meta)
        ->
        <Root>
            <SomeField>
                <SomeChild><Node1>1</Node1><Node2>value-2</Node2><Node3>true</Node3></SomeChild>
                <SomeChild><Node1>1</Node1><Node2>value-2</Node2><Node3>true</Node3></SomeChild>
                ... x10
            </SomeField>
        </Root>
        """
        templates = (MimeoTemplate(template)
                     for template in entry_meta["value"][cc.TEMPLATES_KEY])
        target = parent
        if isinstance(parent, dict):
            parent[entry_meta["name"]] = []
            target = parent[entry_meta["name"]]

        for child in cls.generate(templates):
            target.append(child)
        return parent

    @classmethod
    def _process_atomic_value(
            cls,
            parent: ElemTree.Element,
            entry_meta: dict,
            context: MimeoContext,
    ) -> ElemTree.Element:
        """Process a node with an atomic value.

        A parametrized Mimeo Util is considered as an atomic value as representing one.
        It renders a value for the node.

        Parameters
        ----------
        parent : ElemTree.Element | None
            A parent node
        entry_meta : dict
            Element's metadata
        context : MimeoContext, default None
            The current Mimeo Context (injected by MimeoContextManager)

        Returns
        -------
        ElemTree.Element
            A processed node

        Raises
        ------
        UnsupportedStructureError
            If a list value elements are not atomic-only or dict-only.
        InvalidSpecialFieldValueError
            If a special field value is dict or list
        SpecialFieldNotFoundError
            If a special field does not exist.

        Examples
        --------
        context = MimeoContextManager().get_current_context()
        parent = ElemTree.Element("Root")
        entry_meta = cls._entry_meta(
            tag="SomeField",
            value="value-1",
        )
        cls._process_atomic_value(parent, entry_meta, context)
        ->
        <SomeField>value-1</SomeField>
        """
        value = MimeoRenderer.render(entry_meta["value"])
        if entry_meta["special"]:
            context.curr_iteration().add_special_field(entry_meta["name"], value)
        if isinstance(parent, dict):
            parent[entry_meta["name"]] = value
        elif isinstance(parent, list):
            parent.append(value)
        logger.fine("Rendered value [%s]", value)
        return parent

    @staticmethod
    def _create_node(
            parent: ElemTree.Element,
            entry_meta: dict,
    ) -> ElemTree.Element | ElemTree.SubElement:
        """Create an JSON element based on the `parent` and entry value types.

        Parameters
        ----------
        parent : ElemTree.Element
            A parent node
        entry_meta : dict
            Element's metadata

        Returns
        -------
        ElemTree.Element | ElemTree.SubElement
            If the `parent` is None, returns ElemTree.Element.
            Otherwise, returns ElemTree.SubElement
        """
        new_node = {} if isinstance(entry_meta["value"], dict) else []
        if isinstance(parent, list):
            parent.append(new_node)
            return parent[-1]

        parent[entry_meta["name"]] = new_node
        return parent[entry_meta["name"]]
