[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mimeograph"
version = "1.1.0"
description = "Generate NoSQL data based on a simple template"
authors = ["T.A. Programming Svcs. <tomasz.maciej.aniolowski@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/monasticus/mimeo"
keywords = ["mimeograph", "mimeo", "generate", "generator", "data", "xml", "json", "nosql"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Database",
    "Topic :: Software Development",
    "Topic :: Software Development :: Testing",
    "Topic :: Utilities",
]
packages = [
    { include = "mimeo", from = "src" },
]
include = [
    "src/mimeo/resources/*"
]

[tool.poetry.dependencies]
python = "^3.8"
xmltodict = "^0.13.0"
aiohttp = "^3.8.5"
aiofiles = "^23.1.0"
pandas = "^2.0.3"
PyYAML = "^6.0.1"
haggis = "^0.9.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.280"
isort = "^5.12.0"
requests = "^2.31.0"
aioresponses = "^0.7.4"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-aioresponses = "^0.2.0"
pytest-asyncio = "^0.21.1"

[tool.poetry.scripts]
mimeo = "mimeo.__main__:main"

[tool.pytest.ini_options]
pythonpath = ["."]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "raise NotImplementedError$"
]

[tool.isort]
skip_glob=[
    # Disable imports' sorting when the import order is important
    "src/mimeo/cli/__init__.py",
    "src/mimeo/consumers/__init__.py",
    "src/mimeo/context/__init__.py",
    "src/mimeo/generators/__init__.py"
]

[tool.ruff]
select = [
    "F", "E", "W", "C90", "N", "D", "UP", "B", "A", "COM", "C4", "EM", "EXE", "ISC", "G", "PIE", "T20",
    "PT", "Q", "RSE", "RET", "SLF", "SIM", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "RUF", "FLY",
    "ASYNC", "FA", "FIX", "CPY", "PERF"
]
ignore = []
exclude = [
    ".git",
    ".github",
    ".idea",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "dist",
    "venv",
    "examples",
    "meta",
    "tmp"
]
ignore-init-module-imports = true

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"scripts/*" = [
    "T20" # allow for print in scripts
]
"tests/*" = [
    "D", # disable pydocstyle for tests
    "EM101", # allow string literals in exceptions' tests
    "PLC1901", # allow comparison to blank string in tests
    "PLR2004", # allow magic values in tests
    "SLF001" # allow private members access in tests
]
"src/mimeo/consumers/raw_consumer.py" = [
    "T20" # allow for print in raw consumer
]
"src/mimeo/logging/filters.py" = [
    "A003" # an external superclass
]
"src/mimeo/utils/mimeo_utils.py" = [
    "ARG002" # ignore unexpected keyword arguments
]
"tests/cli/test_mimeo_cli.py" = [
    "PLR0913" # allow for many function arguments in setup with fixtures
]
"tests/utils/test_mimeo_util.py" = [
    "N802" # the test scenario requires uppercased function name
]
